import logging
import sqlite3
from datetime import datetime, timedelta
import re
import json
import base64
import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler

# Logging setup
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot token
TOKEN = '7577232373:AAGeVYpD_XfDpzloO9dongsMx1258UwWxNY'

# Directory for local images
IMAGE_DIR = "images"
if not os.path.exists(IMAGE_DIR):
    os.makedirs(IMAGE_DIR)

# States
(
    CHOOSING, GET_NAME, GET_PHONE, WATER_SELECT, WATER_QUANTITY, CART_SHOW,
    LOCATION, DELIVERY_TIME, CONFIRM_ORDER, ADMIN_PANEL, ADD_DEMO_ADMIN, ADD_SUPER_ADMIN,
    BROADCAST_TEXT, DELETE_ORDER, ADD_CLIENT, DELETE_CLIENT, SEARCH_CLIENT,
    COURIER_PANEL, COURIER_STATUS, COURIER_ORDER_ACTION, ADD_COURIER, COURIER_DEBT_UPDATE,
    EDIT_PROMO, MY_ORDERS
) = range(24)

# Configuration
WATER_SIZES = {"5L": 5000, "10L": 7000, "19L": 18000}
MAX_QUANTITY = 10
RULES = (
    "üì¢ Suv buyurtma qilish qoidalari:\n"
    "- To‚Äòlov naqd pul bilan amalga oshiriladi.\n"
    "- Buyurtmani 1 soat ichida olib ketilmasa, 50% mablag‚Äò qaytariladi.\n\n"
    "Support: +998 90 123 45 67 (Bot Support)\n"
    "         +998 91 765 43 21 (Blue Drop Support)"
)

# Global variables
SUPER_ADMINS = set()
DEMO_ADMINS = set()
TEMP_ADMINS = {}
COURIERS = {}
PROMOS = []

# Database initialization
def init_db():
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute('''CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                phone TEXT UNIQUE NOT NULL,
                address TEXT
            )''')
            c.execute('''CREATE TABLE IF NOT EXISTS orders (
                order_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                name TEXT,
                phone TEXT,
                cart TEXT,
                address TEXT,
                delivery_time TEXT,
                status TEXT DEFAULT 'pending',
                courier_id INTEGER,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )''')
            c.execute('''CREATE TABLE IF NOT EXISTS debts (
                user_id INTEGER PRIMARY KEY,
                coolers INTEGER DEFAULT 0,
                bottles INTEGER DEFAULT 0,
                debt INTEGER DEFAULT 0,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )''')
            c.execute('''CREATE TABLE IF NOT EXISTS couriers (
                courier_id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                phone TEXT UNIQUE NOT NULL,
                status TEXT DEFAULT 'free'
            )''')
            c.execute('''CREATE TABLE IF NOT EXISTS courier_orders (
                order_id INTEGER,
                courier_id INTEGER,
                status TEXT,
                FOREIGN KEY (order_id) REFERENCES orders (order_id),
                FOREIGN KEY (courier_id) REFERENCES couriers (courier_id)
            )''')
            c.execute('''CREATE TABLE IF NOT EXISTS bot_data (
                key TEXT PRIMARY KEY,
                value TEXT
            )''')
            c.execute("INSERT OR IGNORE INTO bot_data (key, value) VALUES (?, ?)", ('super_admins', json.dumps([6999672555])))
            c.execute("INSERT OR IGNORE INTO bot_data (key, value) VALUES (?, ?)", ('demo_admins', json.dumps([])))
            c.execute("INSERT OR IGNORE INTO bot_data (key, value) VALUES (?, ?)", ('temp_admins', json.dumps({6999672555: (datetime.now() + timedelta(hours=24)).isoformat()})))
            c.execute("INSERT OR IGNORE INTO bot_data (key, value) VALUES (?, ?)", ('couriers', json.dumps({})))
            c.execute("INSERT OR IGNORE INTO bot_data (key, value) VALUES (?, ?)", ('promos', json.dumps([
    {"text": "5 ta 19L suv xarid qiling, 1 ta bepul!", "image": r"C:\Users\ADMIN\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\abduaziz\images\promo1.jpg"},
    {"text": "Har 10 ta bokalga 1 ta kuller bepul!", "image": r"C:\Users\ADMIN\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\abduaziz\images\promo2.jpg"},
    {"text": "Birinchi buyurtmada 10% chegirma!", "image": r"C:\Users\ADMIN\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\abduaziz\images\promo3.jpg"}
])))
            conn.commit()
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in init_db: {e}")

def save_image_to_local(filename):
    image_path = os.path.join(IMAGE_DIR, filename)
    if not os.path.exists(image_path):
        with open(image_path, 'wb') as f:
            f.write(b'')
    return image_path

def image_to_base64(image_path):
    try:
        with open(image_path, 'rb') as image_file:
            encoded = base64.b64encode(image_file.read()).decode('utf-8')
            return f"data:image/jpeg;base64,{encoded}"
    except FileNotFoundError:
        logger.error(f"Image not found: {image_path}")
        return None

def load_global_data():
    global SUPER_ADMINS, DEMO_ADMINS, TEMP_ADMINS, COURIERS, PROMOS
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("SELECT key, value FROM bot_data")
            data = {row[0]: json.loads(row[1]) for row in c.fetchall()}
            SUPER_ADMINS = set(data.get('super_admins', [6999672555]))
            DEMO_ADMINS = set(data.get('demo_admins', []))
            TEMP_ADMINS = {int(k): datetime.fromisoformat(v) for k, v in data.get('temp_admins', {6999672555: (datetime.now() + timedelta(hours=24)).isoformat()}).items()}
            COURIERS = {int(k): v for k, v in data.get('couriers', {}).items()}
            PROMOS = data.get('promos', [
                {"text": "5 ta 19L suv xarid qiling, 1 ta bepul!", "image": save_image_to_local("promo1.jpg")},
                {"text": "Har 10 ta bokalga 1 ta kuller bepul!", "image": save_image_to_local("promo2.jpg")},
                {"text": "Birinchi buyurtmada 10% chegirma!", "image": save_image_to_local("promo3.jpg")}
            ])
    except (sqlite3.OperationalError, json.JSONDecodeError) as e:
        logger.error(f"Error loading global data: {e}")

def save_global_data():
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("INSERT OR REPLACE INTO bot_data (key, value) VALUES (?, ?)", ('super_admins', json.dumps(list(SUPER_ADMINS))))
            c.execute("INSERT OR REPLACE INTO bot_data (key, value) VALUES (?, ?)", ('demo_admins', json.dumps(list(DEMO_ADMINS))))
            c.execute("INSERT OR REPLACE INTO bot_data (key, value) VALUES (?, ?)", ('temp_admins', json.dumps({k: v.isoformat() for k, v in TEMP_ADMINS.items()})))
            c.execute("INSERT OR REPLACE INTO bot_data (key, value) VALUES (?, ?)", ('couriers', json.dumps(COURIERS)))
            c.execute("INSERT OR REPLACE INTO bot_data (key, value) VALUES (?, ?)", ('promos', json.dumps(PROMOS)))
            conn.commit()
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in save_global_data: {e}")

init_db()
load_global_data()

# Keyboard functions
def main_menu(user_id=None):
    buttons = [
        ["üéâ Aksiyalar", "üìú Mening buyurtmalarim"],
        ["üì¶ Suv buyurtma qilish", "üõí Savatcha"],
        ["üõ† Qo'llab-quvvatlash markazi"],
        ["üìö Botning qo'llanmasi"]
    ]
    if user_id and is_admin(user_id):
        buttons.append(["‚öôÔ∏è Admin panel"])
    if user_id and is_courier(user_id):
        buttons.append(["üöö Kuryer panel"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def back_button():
    return ReplyKeyboardMarkup([["‚¨ÖÔ∏è Ortga"], ["üè† Asosiy menyu"]], resize_keyboard=True, one_time_keyboard=True)

def water_size_buttons():
    buttons = [[size] for size in WATER_SIZES.keys()]
    buttons.append(["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def quantity_buttons():
    buttons = [[str(i) for i in range(1, 6)], [str(i) for i in range(6, MAX_QUANTITY+1)], ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def location_buttons():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìç Manzilni avto yuborish", request_location=True)],
        ["‚úçÔ∏è Manzilni qo‚Äòlda kiritish"],
        ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]
    ], resize_keyboard=True)

def confirm_buttons():
    return ReplyKeyboardMarkup([["Ha"], ["Bekor qilaman"], ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]], resize_keyboard=True)

def saved_data_buttons(phone, address):
    buttons = []
    if phone and address:
        buttons.append([f"Ispolzovat: {phone}, {address}"])
    buttons.append(["Yangi nomer va manzil"])
    buttons.append(["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def admin_panel_buttons(user_id):
    if is_super_admin(user_id) or is_temp_admin(user_id):
        return ReplyKeyboardMarkup([
            ["üìã Buyurtmalar ro‚Äòyxati", "üìä Statistika"],
            ["‚ûï Super admin qo‚Äòshish", "‚ûï Demo admin qo‚Äòshish"],
            ["‚ûï Mijoz qo‚Äòshish", "üóë Mijoz o‚Äòchirish"],
            ["üîç Mijoz qidirish", "üõë Buyurtmani o‚Äòchirish"],
            ["üì§ Broadcast yuborish", "üì¢ Aksiyalarni tahrirlash"],
            ["‚ûï Kuryer qo‚Äòshish", "üìä Kuryerlar statistikasi"],
            ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]
        ], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([
            ["üìã Buyurtmalar ro‚Äòyxati", "üìä Statistika"],
            ["üîç Mijoz qidirish"],
            ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]
        ], resize_keyboard=True)

def courier_panel_buttons():
    return ReplyKeyboardMarkup([
        ["üìã Mening buyurtmalarim", "üìä Qarzlar"],
        ["‚úÖ Bo'shman", "‚ùå Bandman"],
        ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]
    ], resize_keyboard=True)

def order_action_buttons(order_id, status='pending'):
    buttons = []
    if status == 'pending':
        buttons.append(InlineKeyboardButton("Buyurtmani Oldim", callback_data=f"take_{order_id}"))
    if status in ['pending', 'taken']:
        buttons.append(InlineKeyboardButton("Yetkazildi", callback_data=f"deliver_{order_id}"))
    return InlineKeyboardMarkup([buttons])

# Permission checks
def is_super_admin(user_id):
    return user_id in SUPER_ADMINS

def is_demo_admin(user_id):
    return user_id in DEMO_ADMINS

def is_temp_admin(user_id):
    if user_id in TEMP_ADMINS:
        if datetime.now() < TEMP_ADMINS[user_id]:
            return True
        else:
            TEMP_ADMINS.pop(user_id, None)
            save_global_data()
    return False

def is_admin(user_id):
    return is_super_admin(user_id) or is_demo_admin(user_id) or is_temp_admin(user_id)

def is_courier(user_id):
    return user_id in COURIERS

def all_couriers_busy():
    return all(courier['status'] == 'busy' for courier in COURIERS.values())

# Database functions
def add_user_to_db(user_id, name, phone, address=None):
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("INSERT OR REPLACE INTO users (user_id, name, phone, address) VALUES (?, ?, ?, ?)",
                      (user_id, name, phone, address))
            c.execute("INSERT OR IGNORE INTO debts (user_id, coolers, bottles, debt) VALUES (?, 0, 0, 0)", (user_id,))
            conn.commit()
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in add_user_to_db: {e}")

def add_courier_to_db(courier_id, name, phone):
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("INSERT OR REPLACE INTO couriers (courier_id, name, phone, status) VALUES (?, ?, ?, ?)",
                      (courier_id, name, phone, 'free'))
            conn.commit()
        COURIERS[courier_id] = {'status': 'free', 'name': name, 'phone': phone}
        save_global_data()
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in add_courier_to_db: {e}")

def remove_user_from_db(phone):
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("DELETE FROM users WHERE phone = ?", (phone,))
            c.execute("DELETE FROM orders WHERE phone = ?", (phone,))
            c.execute("DELETE FROM debts WHERE user_id IN (SELECT user_id FROM users WHERE phone = ?)", (phone,))
            conn.commit()
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in remove_user_from_db: {e}")

def get_user_by_id(user_id):
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("SELECT user_id, name, phone, address FROM users WHERE user_id = ?", (user_id,))
            user = c.fetchone()
            if user:
                c.execute("SELECT coolers, bottles, debt FROM debts WHERE user_id = ?", (user[0],))
                debt_info = c.fetchone()
                c.execute("SELECT order_id, cart, address, delivery_time, status, courier_id FROM orders WHERE user_id = ?", (user[0],))
                orders = c.fetchall()
                return {
                    'user_id': user[0],
                    'name': user[1],
                    'phone': user[2],
                    'address': user[3],
                    'coolers': debt_info[0] if debt_info else 0,
                    'bottles': debt_info[1] if debt_info else 0,
                    'debt': debt_info[2] if debt_info else 0,
                    'orders': orders
                }
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in get_user_by_id: {e}")
    return None

def get_user_by_phone(phone):
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("SELECT user_id, name, phone, address FROM users WHERE phone = ?", (phone,))
            user = c.fetchone()
            if user:
                c.execute("SELECT coolers, bottles, debt FROM debts WHERE user_id = ?", (user[0],))
                debt_info = c.fetchone()
                c.execute("SELECT order_id, cart, address, delivery_time, status, courier_id FROM orders WHERE user_id = ?", (user[0],))
                orders = c.fetchall()
                return {
                    'user_id': user[0],
                    'name': user[1],
                    'phone': user[2],
                    'address': user[3],
                    'coolers': debt_info[0] if debt_info else 0,
                    'bottles': debt_info[1] if debt_info else 0,
                    'debt': debt_info[2] if debt_info else 0,
                    'orders': orders
                }
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in get_user_by_phone: {e}")
    return None

def get_top_customer():
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("SELECT user_id, users.name, phone, COUNT(*) as order_count FROM orders JOIN users USING (user_id) GROUP BY user_id ORDER BY order_count DESC LIMIT 1")
            return c.fetchone()
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in get_top_customer: {e}")
    return None

def get_all_orders():
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("SELECT COUNT(*) FROM orders")
            return c.fetchone()[0]
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in get_all_orders: {e}")
    return 0

def update_debt(user_id, coolers=0, bottles=0, debt=0):
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
            if c.fetchone():
                c.execute("UPDATE debts SET coolers = coolers + ?, bottles = bottles + ?, debt = debt + ? WHERE user_id = ?",
                          (coolers, bottles, debt, user_id))
                conn.commit()
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in update_debt: {e}")

def update_order_status(order_id, status, courier_id=None):
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            if courier_id:
                c.execute("UPDATE orders SET status = ?, courier_id = ? WHERE order_id = ?", (status, courier_id, order_id))
            else:
                c.execute("UPDATE orders SET status = ? WHERE order_id = ?", (status, order_id))
            c.execute("INSERT OR REPLACE INTO courier_orders (order_id, courier_id, status) VALUES (?, ?, ?)",
                      (order_id, courier_id, status) if courier_id else (order_id, None, status))
            conn.commit()
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in update_order_status: {e}")

def get_courier_orders(courier_id):
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("SELECT order_id, status FROM courier_orders WHERE courier_id = ?", (courier_id,))
            return c.fetchall()
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in get_courier_orders: {e}")
    return []

def get_free_couriers():
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("SELECT courier_id FROM couriers WHERE status = 'free'")
            return [row[0] for row in c.fetchall()]
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in get_free_couriers: {e}")
    return []

# Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    await update.message.reply_text(
        f"Assalomu alaykum, {user.first_name}!\n\n{RULES}\n\nBuyurtma berish uchun pastdagi tugmalardan foydalaning.",
        reply_markup=main_menu(user_id)
    )
    return CHOOSING

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id

    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Asosiy menyuga qaytdingiz.", reply_markup=main_menu(user_id))
        return CHOOSING

    if text == "üéâ Aksiyalar":
        for i, promo in enumerate(PROMOS, 1):
            msg = f"{i}. {promo['text']}"
            image_path = promo['image']
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await update.message.reply_photo(photo=photo, caption=msg)
            else:
                await update.message.reply_text(msg + "\n(Rasm topilmadi)")
        await update.message.reply_text("Asosiy menyuga qaytish uchun tugmani bosing.", reply_markup=main_menu(user_id))
        return CHOOSING

    if text == "üìú Mening buyurtmalarim":
        return await my_orders(update, context)

    if text == "üì¶ Suv buyurtma qilish":
        context.user_data['cart'] = {}
        context.user_data['address'] = None
        context.user_data['delivery_time'] = None
        context.user_data['phone'] = None
        context.user_data['name'] = None
        await update.message.reply_text("Iltimos, ismingizni kiriting:", reply_markup=back_button())
        return GET_NAME

    if text == "üõí Savatcha":
        return await show_cart(update, context)

    if text == "üõ† Qo'llab-quvvatlash markazi":
        await update.message.reply_text(
            "Qo'llab-quvvatlash:\n"
            "+998 90 123 45 67 (Bot Support)\n"
            "+998 91 765 43 21 (Blue Drop Support)\n\n"
            "Asosiy menyuga qaytish uchun /start yozing.",
            reply_markup=main_menu(user_id)
        )
        return CHOOSING

    if text == "üìö Botning qo'llanmasi":
        await update.message.reply_text(
            "üìñ Bot qo‚Äòllanmasi:\n"
            "- Suv buyurtma qilish uchun 'üì¶ Suv buyurtma qilish' yoki 'üõí Savatcha' tugmasini bosing.\n"
            "- Suv hajmini (5L, 10L, 19L) va miqdorini tanlang.\n"
            "- Manzilni matn sifatida kiriting yoki geolokatsiyani yuboring.\n"
            "- Yetkazib berish vaqtini kiriting (masalan, 12-14 vaqt oralig'ida).\n"
            "- Buyurtmani tasdiqlang, kuryer buyurtmani qabul qiladi.",
            reply_markup=main_menu(user_id)
        )
        return CHOOSING

    if text == "‚öôÔ∏è Admin panel" and is_admin(user_id):
        return await admin_panel(update, context)

    if text == "üöö Kuryer panel" and is_courier(user_id):
        return await courier_panel(update, context)

    if text in WATER_SIZES.keys():
        context.user_data['current_size'] = text
        await update.message.reply_text(f"Nechta {text} suv sotib olmoqchisiz? (1 dan {MAX_QUANTITY} gacha)", reply_markup=quantity_buttons())
        return WATER_QUANTITY

    await update.message.reply_text("Noto‚Äòg‚Äòri buyruq. /start bilan boshlang.", reply_markup=main_menu(user_id))
    return CHOOSING

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Asosiy menyuga qaytdingiz.", reply_markup=main_menu(user_id))
        return CHOOSING
    if len(text) < 3 or not all(x.isalpha() or x.isspace() for x in text):
        await update.message.reply_text("Iltimos, to‚Äòg‚Äòri ismingizni kiriting (faqat harflar).")
        return GET_NAME
    context.user_data['name'] = text
    await update.message.reply_text("Telefon raqamingizni +998XXYYYYYYY formatda kiriting:", reply_markup=back_button())
    return GET_PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga"]:
        await update.message.reply_text("Ism so‚Äòrashga qaytdingiz.", reply_markup=back_button())
        return GET_NAME
    if text == "üè† Asosiy menyu":
        await update.message.reply_text("Asosiy menyuga qaytdingiz.", reply_markup=main_menu(user_id))
        return CHOOSING
    if not re.fullmatch(r'\+998\d{9}', text):
        await update.message.reply_text("Telefon raqamingiz noto‚Äòg‚Äòri. +998XXYYYYYYY formatda kiriting.")
        return GET_PHONE
    context.user_data['phone'] = text
    add_user_to_db(user_id, context.user_data['name'], text)
    user = get_user_by_id(user_id)
    if user and user['phone'] and user['address']:
        context.user_data['name'] = user['name']
        context.user_data['phone'] = user['phone']
        context.user_data['address'] = user['address']
        await update.message.reply_text("Ma'lumotlarni tanlang:", reply_markup=saved_data_buttons(user['phone'], user['address']))
        return WATER_SELECT
    else:
        await update.message.reply_text("Suv hajmini tanlang:", reply_markup=water_size_buttons())
        return WATER_SELECT

async def water_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga"]:
        user = get_user_by_id(user_id)
        if user and user['phone'] and user['address']:
            await update.message.reply_text("Ma'lumotlarni tanlang:", reply_markup=saved_data_buttons(user['phone'], user['address']))
        else:
            await update.message.reply_text("Telefon raqamingizni +998XXYYYYYYY formatda kiriting:", reply_markup=back_button())
        return GET_PHONE
    if text == "üè† Asosiy menyu":
        await update.message.reply_text("Asosiy menyuga qaytdingiz.", reply_markup=main_menu(user_id))
        return CHOOSING
    if text in WATER_SIZES.keys():
        context.user_data['current_size'] = text
        await update.message.reply_text(f"Nechta {text} suv sotib olmoqchisiz? (1 dan {MAX_QUANTITY} gacha)", reply_markup=quantity_buttons())
        return WATER_QUANTITY
    if text.startswith("Ispolzovat:") or text == "Yangi nomer va manzil":
        return await location_handler(update, context)
    await update.message.reply_text("Iltimos, suv hajmini tanlang:", reply_markup=water_size_buttons())
    return WATER_SELECT

async def water_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga"]:
        await update.message.reply_text("Suv hajmi tanlashga qaytdingiz.", reply_markup=water_size_buttons())
        return WATER_SELECT
    if text == "üè† Asosiy menyu":
        await update.message.reply_text("Asosiy menyuga qaytdingiz.", reply_markup=main_menu(user_id))
        return CHOOSING
    if not text.isdigit() or not (1 <= int(text) <= MAX_QUANTITY):
        await update.message.reply_text(f"Iltimos, 1 dan {MAX_QUANTITY} gacha son kiriting.")
        return WATER_QUANTITY
    quantity = int(text)
    size = context.user_data.get('current_size')
    if not size:
        await update.message.reply_text("Suv hajmi topilmadi, qaytadan boshlang.", reply_markup=main_menu(user_id))
        return CHOOSING
    cart = context.user_data.get('cart', {})
    cart[size] = cart.get(size, 0) + quantity
    context.user_data['cart'] = cart
    total = sum(WATER_SIZES[size] * count for size, count in cart.items())
    await update.message.reply_text(
        f"{quantity} dona {size} suv savatchaga qo‚Äòshildi.\n"
        f"Savatchada: {', '.join([f'{s}: {c} dona' for s, c in cart.items()])}\n"
        f"Jami: {total} so'm\n"
        f"Yana suv qo‚Äòshish uchun hajm tanlang yoki Asosiy Menu ni bosib 'üõí Savatcha' bilan davom eting.",
        reply_markup=water_size_buttons()
    )
    return WATER_SELECT

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cart = context.user_data.get('cart', {})
    if not cart:
        await update.message.reply_text("Savatcha bo‚Äòsh.", reply_markup=main_menu(user_id))
        return CHOOSING
    msg = "Savatchangizdagi buyurtmalar:\n"
    total = 0
    for size, count in cart.items():
        price = WATER_SIZES[size] * count
        total += price
        msg += f"{size} - {count} dona - {price} so'm\n"
    msg += f"\nJami: {total} so'm\n\n"

    user = get_user_by_id(user_id)
    if user and user['phone'] and user['address']:
        context.user_data['name'] = user['name']
        context.user_data['phone'] = user['phone']
        context.user_data['address'] = user['address']
        msg += "Iltimos, ma'lumotlarni tanlang:"
        await update.message.reply_text(msg, reply_markup=saved_data_buttons(user['phone'], user['address']))
        return LOCATION
    else:
        msg += "Iltimos, manzilingizni kiriting yoki geolokatsiyani yuboring:"
        await update.message.reply_text(msg, reply_markup=location_buttons())
        return LOCATION

async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user_by_id(user_id)
    location = update.message.location
    text = update.message.text.strip() if update.message.text else None

    if text in ["‚¨ÖÔ∏è Ortga"]:
        await update.message.reply_text("Savatcha ko‚Äòrsatildi.", reply_markup=water_size_buttons())
        return WATER_SELECT
    if text == "üè† Asosiy menyu":
        await update.message.reply_text("Asosiy menyuga qaytdingiz.", reply_markup=main_menu(user_id))
        return CHOOSING

    if text == "‚úçÔ∏è Manzilni qo‚Äòlda kiritish":
        await update.message.reply_text(
            "Iltimos, manzilni yoki havolani kiriting (masalan, https://maps.google.com/... yoki A.Baxodirox 201 4):",
            reply_markup=back_button()
        )
        return LOCATION

    if location:  # User shared location via button
        maps_url = f"https://maps.google.com/?q={location.latitude},{location.longitude}"
        context.user_data['address'] = maps_url
        try:
            with sqlite3.connect('water_bot.db', timeout=10) as conn:
                c = conn.cursor()
                c.execute("UPDATE users SET address = ? WHERE user_id = ?", (maps_url, user_id))
                conn.commit()
        except sqlite3.OperationalError as e:
            logger.error(f"Database error in location_handler: {e}")
            await update.message.reply_text("Xatolik yuz berdi, qaytadan urinib ko‚Äòring.", reply_markup=location_buttons())
            return LOCATION
        await update.message.reply_text(f"Manzil qabul qilindi: {maps_url}\nYetkazib berish vaqtini kiriting (masalan, 12-14):", reply_markup=back_button())
        return DELIVERY_TIME

    if text and text == f"Ispolzovat: {user['phone']}, {user['address']}" and user:
        context.user_data['phone'] = user['phone']
        context.user_data['address'] = user['address']
        await update.message.reply_text("Yetkazib berish vaqtini kiriting (masalan, 12-14):", reply_markup=back_button())
        return DELIVERY_TIME
    elif text and text == "Yangi nomer va manzil":
        await update.message.reply_text("Iltimos, ismingizni kiriting:", reply_markup=back_button())
        return GET_NAME
    elif text:
        # Accept either a URL or a text address
        if text.startswith(("http://", "https://")) and not re.match(r'https?://(maps\.google\.com|yandex\.uz/maps|2gis\.uz)/.*', text):
            await update.message.reply_text(
                "Iltimos, to‚Äòg‚Äòri manzil havolasini yuboring (masalan, Google Maps, Yandex Maps):",
                reply_markup=location_buttons()
            )
            return LOCATION
        context.user_data['address'] = text
        try:
            with sqlite3.connect('water_bot.db', timeout=10) as conn:
                c = conn.cursor()
                c.execute("UPDATE users SET address = ? WHERE user_id = ?", (text, user_id))
                conn.commit()
        except sqlite3.OperationalError as e:
            logger.error(f"Database error in location_handler: {e}")
            await update.message.reply_text("Xatolik yuz berdi, qaytadan urinib ko‚Äòring.", reply_markup=location_buttons())
            return LOCATION
        await update.message.reply_text("Yetkazib berish vaqtini kiriting (masalan, 12-14):", reply_markup=back_button())
        return DELIVERY_TIME
    else:
        await update.message.reply_text(
            "Iltimos, manzilni avtomatik yuboring yoki qo‚Äòlda kiriting:",
            reply_markup=location_buttons()
        )
        return LOCATION

async def delivery_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga"]:
        user = get_user_by_id(user_id)
        if user and user['phone'] and user['address']:
            await update.message.reply_text("Ma'lumotlarni tanlang:", reply_markup=saved_data_buttons(user['phone'], user['address']))
        else:
            await update.message.reply_text("Manzilni qaytadan kiriting yoki geolokatsiyani yuboring.", reply_markup=location_buttons())
        return LOCATION
    if text == "üè† Asosiy menyu":
        await update.message.reply_text("Asosiy menyuga qaytdingiz.", reply_markup=main_menu(user_id))
        return CHOOSING

    if not re.match(r'^\d{1,2}-\d{1,2}$', text):
        await update.message.reply_text("Iltimos, yetkazib berish vaqtini to‚Äòg‚Äòri formatda kiriting (masalan, 12-14):", reply_markup=back_button())
        return DELIVERY_TIME

    context.user_data['delivery_time'] = text

    cart = context.user_data.get('cart', {})
    total = sum(WATER_SIZES[size] * count for size, count in cart.items())
    order_summary = "\n".join([f"{size} - {count} dona" for size, count in cart.items()])
    address = context.user_data['address']

    confirm_msg = (
        f"Buyurtmangizni tasdiqlang:\n\n"
        f"Ism: {context.user_data['name']}\n"
        f"Telefon: {context.user_data['phone']}\n"
        f"Suvlar:\n{order_summary}\n"
        f"Yetkazib berish vaqti: {text}\n"
        f"Jami to‚Äòlov: {total} so'm\n"
        f"Manzil: {address}\n\n"
        "Tasdiqlash uchun 'Ha', bekor qilish uchun 'Bekor qilaman' deb yozing."
    )
    await update.message.reply_text(confirm_msg, reply_markup=confirm_buttons())
    return CONFIRM_ORDER

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    user_id = update.effective_user.id

    if text == "‚¨ÖÔ∏è ortga":
        user = get_user_by_id(user_id)
        if user and user['phone'] and user['address']:
            await update.message.reply_text("Ma'lumotlarni tanlang:", reply_markup=saved_data_buttons(user['phone'], user['address']))
        else:
            await update.message.reply_text("Manzilni qaytadan kiriting yoki geolokatsiyani yuboring.", reply_markup=location_buttons())
        return LOCATION
    if text == "üè† asosiy menyu":
        await update.message.reply_text("Asosiy menyuga qaytdingiz.", reply_markup=main_menu(user_id))
        return CHOOSING

    if text == "ha":
        if all_couriers_busy():
            await update.message.reply_text(
                "Hozirda kuryerlar band, iltimos keyinroq urinib ko‚Äòring.",
                reply_markup=main_menu(user_id)
            )
            return CHOOSING

        cart = context.user_data.get('cart', {})
        cart_str = str(cart)
        try:
            with sqlite3.connect('water_bot.db', timeout=10) as conn:
                c = conn.cursor()
                c.execute("INSERT OR REPLACE INTO users (user_id, name, phone, address) VALUES (?, ?, ?, ?)",
                          (user_id, context.user_data['name'], context.user_data['phone'], context.user_data['address']))
                c.execute("INSERT INTO orders (user_id, name, phone, cart, address, delivery_time, status) VALUES (?, ?, ?, ?, ?, ?, ?)",
                          (user_id, context.user_data['name'], context.user_data['phone'], cart_str,
                           context.user_data['address'], context.user_data['delivery_time'], 'pending'))
                order_id = c.lastrowid
                conn.commit()

            user = get_user_by_id(user_id)
            total = sum(WATER_SIZES[size] * count for size, count in cart.items())
            order_summary = "\n".join([f"{size} - {count} dona" for size, count in cart.items()])
            admin_msg = (
                f"Yangi buyurtma (ID: {order_id}):\n"
                f"Ism: {context.user_data['name']}\n"
                f"Telefon: {context.user_data['phone']}\n"
                f"Suvlar:\n{order_summary}\n"
                f"Jami: {total} so'm\n"
                f"Manzil: {context.user_data['address']}\n"
                f"Yetkazib berish vaqti: {context.user_data['delivery_time']}\n"
                f"Qarz: {user['debt']} so'm\n"
                f"Bokallar: {user['bottles']}\n"
                f"Kullerlar: {user['coolers']}"
            )
            free_couriers = get_free_couriers()
            for courier_id in free_couriers:
                try:
                    await context.bot.send_message(
                        chat_id=courier_id,
                        text=admin_msg,
                        reply_markup=order_action_buttons(order_id, 'pending')
                    )
                except Exception as e:
                    logger.error(f"Failed to send order notification to courier {courier_id}: {e}")

            admins = list(SUPER_ADMINS) + [tid for tid, expiry in TEMP_ADMINS.items() if datetime.now() < expiry]
            for admin_id in admins:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=admin_msg
                    )
                except Exception as e:
                    logger.error(f"Failed to send order notification to admin {admin_id}: {e}")

            context.user_data.clear()
            await update.message.reply_text("Buyurtmangiz qabul qilindi! Kuryer tasdiqlashini kuting.", reply_markup=main_menu(user_id))
            return CHOOSING

        except sqlite3.OperationalError as e:
            logger.error(f"Database error in confirm_order: {e}")
            await update.message.reply_text("Xatolik yuz berdi, qaytadan urinib ko‚Äòring.", reply_markup=main_menu(user_id))
            return CHOOSING

    elif text == "bekor qilaman":
        context.user_data.clear()
        await update.message.reply_text("Buyurtma bekor qilindi.", reply_markup=main_menu(user_id))
        return CHOOSING

    else:
        await update.message.reply_text("Iltimos, 'Ha' yoki 'Bekor qilaman' deb yozing.", reply_markup=confirm_buttons())
        return CONFIRM_ORDER

async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user_by_id(user_id)
    if not user or not user['orders']:
        await update.message.reply_text("Sizda hali buyurtmalar yo‚Äòq.", reply_markup=main_menu(user_id))
        return CHOOSING
    msg = "Sizning buyurtmalaringiz:\n\n"
    for order in user['orders']:
        cart = eval(order[1])
        total = sum(WATER_SIZES[size] * count for size, count in cart.items())
        msg += (
            f"Buyurtma ID: {order[0]}\n"
            f"Suvlar: {', '.join([f'{size}: {count}' for size, count in cart.items()])}\n"
            f"Manzil: {order[2]}\n"
            f"Yetkazib berish vaqti: {order[3]}\n"
            f"Status: {order[4]}\n"
            f"Jami: {total} so'm\n"
            "--------------------\n"
        )
    await update.message.reply_text(msg, reply_markup=main_menu(user_id))
    return CHOOSING

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("Sizda admin panelga kirish huquqi yo‚Äòq.", reply_markup=main_menu(user_id))
        return CHOOSING
    await update.message.reply_text("Admin panel:", reply_markup=admin_panel_buttons(user_id))
    return ADMIN_PANEL

async def admin_panel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id

    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Asosiy menyuga qaytdingiz.", reply_markup=main_menu(user_id))
        return CHOOSING

    if text == "üìã Buyurtmalar ro‚Äòyxati":
        try:
            with sqlite3.connect('water_bot.db', timeout=10) as conn:
                c = conn.cursor()
                c.execute("SELECT order_id, name, phone, cart, address, delivery_time, status, courier_id FROM orders")
                orders = c.fetchall()
                if not orders:
                    await update.message.reply_text("Hozircha buyurtmalar yo‚Äòq.", reply_markup=admin_panel_buttons(user_id))
                    return ADMIN_PANEL
                msg = "Buyurtmalar ro‚Äòyxati:\n\n"
                for order in orders:
                    cart = eval(order[3])
                    total = sum(WATER_SIZES[size] * count for size, count in cart.items())
                    order_summary = "\n".join([f"{size} - {count} dona" for size, count in cart.items()])
                    courier = COURIERS.get(order[7], {'name': 'Kuryer tayinlanmagan'})['name'] if order[7] else 'Kuryer tayinlanmagan'
                    msg += (
                        f"Buyurtma ID: {order[0]}\n"
                        f"Ism: {order[1]}\n"
                        f"Telefon: {order[2]}\n"
                        f"Suvlar:\n{order_summary}\n"
                        f"Jami: {total} so'm\n"
                        f"Manzil: {order[4]}\n"
                        f"Yetkazib berish vaqti: {order[5]}\n"
                        f"Status: {order[6]}\n"
                        f"Kuryer: {courier}\n"
                        "--------------------\n"
                    )
                await update.message.reply_text(msg, reply_markup=admin_panel_buttons(user_id))
                return ADMIN_PANEL
        except sqlite3.OperationalError as e:
            logger.error(f"Database error in admin_panel_handler (orders): {e}")
            await update.message.reply_text("Xatolik yuz berdi, qaytadan urinib ko‚Äòring.", reply_markup=admin_panel_buttons(user_id))
            return ADMIN_PANEL

    if text == "üìä Statistika":
        top_customer = get_top_customer()
        total_orders = get_all_orders()
        try:
            with sqlite3.connect('water_bot.db', timeout=10) as conn:
                c = conn.cursor()
                c.execute("SELECT SUM(bottles), SUM(debt) FROM debts")
                total_bottles, total_debt = c.fetchone()
                c.execute("SELECT cart FROM orders WHERE status = 'delivered'")
                total_sales = sum(sum(WATER_SIZES[size] * count for size, count in eval(order[0]).items()) for order in c.fetchall())
        except sqlite3.OperationalError as e:
            logger.error(f"Database error in stats: {e}")
            total_bottles, total_debt, total_sales = 0, 0, 0
        msg = (
            f"üìä Statistika:\n"
            f"Jami buyurtmalar: {total_orders}\n"
            f"Jami sotilgan bokallar: {total_bottles or 0}\n"
            f"Jami qarz: {total_debt or 0} so'm\n"
            f"Jami savdo: {total_sales} so'm\n"
        )
        if top_customer:
            msg += (
                f"Eng ko‚Äòp buyurtma bergan mijoz:\n"
                f"Ism: {top_customer[1]}\n"
                f"Telefon: {top_customer[2]}\n"
                f"Buyurtmalar soni: {top_customer[3]}\n"
            )
        await update.message.reply_text(msg, reply_markup=admin_panel_buttons(user_id))
        return ADMIN_PANEL

    if text == "üìä Kuryerlar statistikasi" and (is_super_admin(user_id) or is_temp_admin(user_id)):
        try:
            with sqlite3.connect('water_bot.db', timeout=10) as conn:
                c = conn.cursor()
                c.execute("""
                    SELECT c.courier_id, c.name, 
                           COUNT(co.order_id) as order_count, 
                           COALESCE(SUM(CASE WHEN o.cart LIKE '%19L%' THEN CAST(SUBSTR(o.cart, INSTR(o.cart, '19L') + 5, INSTR(SUBSTR(o.cart, INSTR(o.cart, '19L')), '}') - 2) AS INTEGER) ELSE 0 END), 0) as total_bottles,
                           COALESCE(SUM(d.debt), 0) as total_debt
                    FROM couriers c
                    LEFT JOIN courier_orders co ON c.courier_id = co.courier_id AND co.status = 'delivered'
                    LEFT JOIN orders o ON co.order_id = o.order_id
                    LEFT JOIN debts d ON o.user_id = d.user_id
                    GROUP BY c.courier_id, c.name
                """)
                stats = c.fetchall()
                if not stats:
                    await update.message.reply_text("Kuryerlar bo‚Äòyicha statistika yo‚Äòq.", reply_markup=admin_panel_buttons(user_id))
                    return ADMIN_PANEL
                msg = "üìä Kuryerlar statistikasi:\n\n"
                for stat in stats:
                    msg += (
                        f"Kuryer: {stat[1]}\n"
                        f"Buyurtmalar soni: {stat[2]}\n"
                        f"Sotilgan 19L bokallar: {stat[3]}\n"
                        f"Mijozlar qarzi: {stat[4]} so'm\n"
                        "--------------------\n"
                    )
                await update.message.reply_text(msg, reply_markup=admin_panel_buttons(user_id))
                return ADMIN_PANEL
        except sqlite3.OperationalError as e:
            logger.error(f"Database error in courier_stats: {e}")
            await update.message.reply_text("Xatolik yuz berdi, qaytadan urinib ko‚Äòring.", reply_markup=admin_panel_buttons(user_id))
            return ADMIN_PANEL

    if text == "‚ûï Super admin qo‚Äòshish" and (is_super_admin(user_id) or is_temp_admin(user_id)):
        await update.message.reply_text("Super admin qo‚Äòshish uchun foydalanuvchi ID sini kiriting:", reply_markup=back_button())
        return ADD_SUPER_ADMIN

    if text == "‚ûï Demo admin qo‚Äòshish" and (is_super_admin(user_id) or is_temp_admin(user_id)):
        await update.message.reply_text("Demo admin qo‚Äòshish uchun foydalanuvchi ID sini kiriting:", reply_markup=back_button())
        return ADD_DEMO_ADMIN

    if text == "‚ûï Mijoz qo‚Äòshish" and (is_super_admin(user_id) or is_temp_admin(user_id)):
        await update.message.reply_text("Mijoz qo‚Äòshish uchun telefon raqamini (+998XXYYYYYYY) kiriting:", reply_markup=back_button())
        return ADD_CLIENT

    if text == "üóë Mijoz o‚Äòchirish" and (is_super_admin(user_id) or is_temp_admin(user_id)):
        await update.message.reply_text("O‚Äòchirish uchun mijozning telefon raqamini (+998XXYYYYYYY) kiriting:", reply_markup=back_button())
        return DELETE_CLIENT

    if text == "üîç Mijoz qidirish":
        await update.message.reply_text("Mijozni qidirish uchun telefon raqamini (+998XXYYYYYYY) yoki ismini kiriting:", reply_markup=back_button())
        return SEARCH_CLIENT

    if text == "üõë Buyurtmani o‚Äòchirish" and (is_super_admin(user_id) or is_temp_admin(user_id)):
        await update.message.reply_text("O‚Äòchirish uchun buyurtma ID sini kiriting:", reply_markup=back_button())
        return DELETE_ORDER

    if text == "üì§ Broadcast yuborish" and (is_super_admin(user_id) or is_temp_admin(user_id)):
        await update.message.reply_text("Broadcast uchun xabar matnini kiriting:", reply_markup=back_button())
        return BROADCAST_TEXT

    if text == "üì¢ Aksiyalarni tahrirlash" and (is_super_admin(user_id) or is_temp_admin(user_id)):
        await update.message.reply_text("Aksiya indeksini, matnini va rasm fayl nomini kiriting (masalan: 1|5 ta 19L bepul|promo1.jpg):", reply_markup=back_button())
        return EDIT_PROMO

    if text == "‚ûï Kuryer qo‚Äòshish" and (is_super_admin(user_id) or is_temp_admin(user_id)):
        await update.message.reply_text("Kuryer qo‚Äòshish uchun ID, ism va telefon raqamini (+998XXYYYYYYY) kiriting (masalan: 123456|Ali|+998901234567):", reply_markup=back_button())
        return ADD_COURIER

    await update.message.reply_text("Noto‚Äòg‚Äòri buyruq. Tugmalardan birini tanlang.", reply_markup=admin_panel_buttons(user_id))
    return ADMIN_PANEL

async def add_super_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Admin panelga qaytdingiz.", reply_markup=admin_panel_buttons(user_id))
        return ADMIN_PANEL
    if not text.isdigit():
        await update.message.reply_text("Iltimos, faqat raqamli ID kiriting.")
        return ADD_SUPER_ADMIN
    new_admin_id = int(text)
    SUPER_ADMINS.add(new_admin_id)
    save_global_data()
    await update.message.reply_text(f"ID {new_admin_id} super admin sifatida qo‚Äòshildi.", reply_markup=admin_panel_buttons(user_id))
    return ADMIN_PANEL

async def add_demo_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Admin panelga qaytdingiz.", reply_markup=admin_panel_buttons(user_id))
        return ADMIN_PANEL
    if not text.isdigit():
        await update.message.reply_text("Iltimos, faqat raqamli ID kiriting.")
        return ADD_DEMO_ADMIN
    new_admin_id = int(text)
    DEMO_ADMINS.add(new_admin_id)
    save_global_data()
    await update.message.reply_text(f"ID {new_admin_id} demo admin sifatida qo‚Äòshildi.", reply_markup=admin_panel_buttons(user_id))
    return ADMIN_PANEL

async def add_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Admin panelga qaytdingiz.", reply_markup=admin_panel_buttons(user_id))
        return ADMIN_PANEL
    if not re.fullmatch(r'\+998\d{9}', text):
        await update.message.reply_text("Iltimos, to‚Äòg‚Äòri telefon raqamini (+998XXYYYYYYY) kiriting.")
        return ADD_CLIENT
    add_user_to_db(0, "Unknown", text)
    await update.message.reply_text(f"Telefon {text} mijoz sifatida qo‚Äòshildi.", reply_markup=admin_panel_buttons(user_id))
    return ADMIN_PANEL

async def delete_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Admin panelga qaytdingiz.", reply_markup=admin_panel_buttons(user_id))
        return ADMIN_PANEL
    if not re.fullmatch(r'\+998\d{9}', text):
        await update.message.reply_text("Iltimos, to‚Äòg‚Äòri telefon raqamini (+998XXYYYYYYY) kiriting.")
        return DELETE_CLIENT
    remove_user_from_db(text)
    await update.message.reply_text(f"Telefon {text} mijozlar ro‚Äòyxatidan o‚Äòchirildi.", reply_markup=admin_panel_buttons(user_id))
    return ADMIN_PANEL

async def search_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Admin panelga qaytdingiz.", reply_markup=admin_panel_buttons(user_id))
        return ADMIN_PANEL
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            if re.fullmatch(r'\+998\d{9}', text):
                c.execute("SELECT user_id, name, phone, address FROM users WHERE phone = ?", (text,))
            else:
                c.execute("SELECT user_id, name, phone, address FROM users WHERE name LIKE ?", (f'%{text}%',))
            user = c.fetchone()
            if not user:
                await update.message.reply_text("Bunday mijoz topilmadi.", reply_markup=admin_panel_buttons(user_id))
                return ADMIN_PANEL
            c.execute("SELECT coolers, bottles, debt FROM debts WHERE user_id = ?", (user[0],))
            debt_info = c.fetchone()
            c.execute("SELECT order_id, cart, address, delivery_time, status FROM orders WHERE user_id = ?", (user[0],))
            orders = c.fetchall()
            msg = (
                f"Mijoz ma'lumotlari:\n"
                f"Ism: {user[1]}\n"
                f"Telefon: {user[2]}\n"
                f"Manzil: {user[3] or 'Yo‚Äòq'}\n"
                f"Kullerlar: {debt_info[0] if debt_info else 0}\n"
                f"Bokallar: {debt_info[1] if debt_info else 0}\n"
                f"Qarz: {debt_info[2] if debt_info else 0} so'm\n"
                f"Buyurtmalar soni: {len(orders)}\n"
            )
            if orders:
                msg += "Buyurtmalar:\n"
                for order in orders:
                    cart = eval(order[1])
                    total = sum(WATER_SIZES[size] * count for size, count in cart.items())
                    msg += (
                        f"Buyurtma ID: {order[0]}\n"
                        f"Suvlar: {', '.join([f'{size}: {count}' for size, count in cart.items()])}\n"
                        f"Manzil: {order[2]}\n"
                        f"Yetkazib berish vaqti: {order[3]}\n"
                        f"Status: {order[4]}\n"
                        f"Jami: {total} so'm\n"
                        "--------------------\n"
                    )
            await update.message.reply_text(msg, reply_markup=admin_panel_buttons(user_id))
            return ADMIN_PANEL
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in search_client: {e}")
        await update.message.reply_text("Xatolik yuz berdi, qaytadan urinib ko‚Äòring.", reply_markup=admin_panel_buttons(user_id))
        return ADMIN_PANEL

async def delete_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Admin panelga qaytdingiz.", reply_markup=admin_panel_buttons(user_id))
        return ADMIN_PANEL
    if not text.isdigit():
        await update.message.reply_text("Iltimos, faqat raqamli buyurtma ID sini kiriting.")
        return DELETE_ORDER
    order_id = int(text)
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("DELETE FROM orders WHERE order_id = ?", (order_id,))
            c.execute("DELETE FROM courier_orders WHERE order_id = ?", (order_id,))
            conn.commit()
        await update.message.reply_text(f"Buyurtma ID {order_id} o‚Äòchirildi.", reply_markup=admin_panel_buttons(user_id))
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in delete_order: {e}")
        await update.message.reply_text("Xatolik yuz berdi, qaytadan urinib ko‚Äòring.", reply_markup=admin_panel_buttons(user_id))
    return ADMIN_PANEL

async def broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Admin panelga qaytdingiz.", reply_markup=admin_panel_buttons(user_id))
        return ADMIN_PANEL
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("SELECT user_id FROM users")
            users = c.fetchall()
        for uid in users:
            try:
                await context.bot.send_message(chat_id=uid[0], text=text)
            except Exception as e:
                logger.error(f"Failed to send broadcast to {uid[0]}: {e}")
        await update.message.reply_text("Broadcast barcha foydalanuvchilarga yuborildi.", reply_markup=admin_panel_buttons(user_id))
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in broadcast_text: {e}")
        await update.message.reply_text("Xatolik yuz berdi, qaytadan urinib ko‚Äòring.", reply_markup=admin_panel_buttons(user_id))
    return ADMIN_PANEL

async def edit_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Admin panelga qaytdingiz.", reply_markup=admin_panel_buttons(user_id))
        return ADMIN_PANEL
    try:
        index, promo_text, image_filename = text.split('|')
        index = int(index) - 1
        if index < 0 or index >= len(PROMOS):
            await update.message.reply_text("Noto‚Äòg‚Äòri indeks. Aksiyalar ro‚Äòyxatida 1 dan {} gacha indekslar mavjud.".format(len(PROMOS)), reply_markup=admin_panel_buttons(user_id))
            return ADMIN_PANEL
        image_path = os.path.join(IMAGE_DIR, image_filename)
        if not os.path.exists(image_path):
            await update.message.reply_text("Rasm fayli topilmadi. Iltimos, faylni '{}' papkasiga joylang.".format(IMAGE_DIR), reply_markup=admin_panel_buttons(user_id))
            return EDIT_PROMO
        PROMOS[index] = {'text': promo_text, 'image': image_path}
        save_global_data()
        await update.message.reply_text(f"Aksiya {index+1} tahrirlandi.", reply_markup=admin_panel_buttons(user_id))
    except ValueError:
        await update.message.reply_text("Iltimos, to‚Äòg‚Äòri formatda kiriting: indeks|matn|rasm_fayl_nomi")
        return EDIT_PROMO
    return ADMIN_PANEL

async def add_courier(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Admin panelga qaytdingiz.", reply_markup=admin_panel_buttons(user_id))
        return ADMIN_PANEL
    try:
        courier_id, name, phone = text.split('|')
        courier_id = int(courier_id)
        if not re.fullmatch(r'\+998\d{9}', phone):
            await update.message.reply_text("Iltimos, to‚Äòg‚Äòri telefon raqamini (+998XXYYYYYYY) kiriting.")
            return ADD_COURIER
        add_courier_to_db(courier_id, name, phone)
        await update.message.reply_text(f"Kuryer {name} qo‚Äòshildi.", reply_markup=admin_panel_buttons(user_id))
    except ValueError:
        await update.message.reply_text("Iltimos, to‚Äòg‚Äòri formatda kiriting: ID|Ism|Telefon")
        return ADD_COURIER
    return ADMIN_PANEL

async def courier_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_courier(user_id):
        await update.message.reply_text("Sizda kuryer paneliga kirish huquqi yo‚Äòq.", reply_markup=main_menu(user_id))
        return CHOOSING
    await update.message.reply_text("Kuryer panel:", reply_markup=courier_panel_buttons())
    return COURIER_PANEL

async def courier_panel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id

    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Asosiy menyuga qaytdingiz.", reply_markup=main_menu(user_id))
        return CHOOSING

    if text == "üìã Mening buyurtmalarim":
        orders = get_courier_orders(user_id)
        if not orders:
            await update.message.reply_text("Sizda hali buyurtmalar yo‚Äòq.", reply_markup=courier_panel_buttons())
            return COURIER_PANEL
        msg = "Sizning buyurtmalaringiz:\n\n"
        try:
            with sqlite3.connect('water_bot.db', timeout=10) as conn:
                c = conn.cursor()
                for order in orders:
                    c.execute("SELECT name, phone, cart, address, delivery_time, status FROM orders WHERE order_id = ?", (order[0],))
                    order_info = c.fetchone()
                    if order_info:
                        cart = eval(order_info[2])
                        total = sum(WATER_SIZES[size] * count for size, count in cart.items())
                        msg += (
                            f"Buyurtma ID: {order[0]}\n"
                            f"Ism: {order_info[0]}\n"
                            f"Telefon: {order_info[1]}\n"
                            f"Suvlar: {', '.join([f'{size}: {count}' for size, count in cart.items()])}\n"
                            f"Jami: {total} so'm\n"
                            f"Manzil: {order_info[3]}\n"
                            f"Yetkazib berish vaqti: {order_info[4]}\n"
                            f"Status: {order_info[5]}\n"
                            "--------------------\n"
                        )
            await update.message.reply_text(msg, reply_markup=courier_panel_buttons())
        except sqlite3.OperationalError as e:
            logger.error(f"Database error in courier_orders: {e}")
            await update.message.reply_text("Xatolik yuz berdi, qaytadan urinib ko‚Äòring.", reply_markup=courier_panel_buttons())
        return COURIER_PANEL

    if text == "üìä Qarzlar":
        await update.message.reply_text("Mijozning telefon raqamini (+998XXYYYYYYY) kiriting:", reply_markup=back_button())
        return COURIER_DEBT_UPDATE

    if text == "‚úÖ Bo'shman":
        try:
            with sqlite3.connect('water_bot.db', timeout=10) as conn:
                c = conn.cursor()
                c.execute("UPDATE couriers SET status = 'free' WHERE courier_id = ?", (user_id,))
                conn.commit()
            COURIERS[user_id]['status'] = 'free'
            save_global_data()
            await update.message.reply_text("Sizning statusingiz: Bo'sh.", reply_markup=courier_panel_buttons())
        except sqlite3.OperationalError as e:
            logger.error(f"Database error in set_courier_status: {e}")
            await update.message.reply_text("Xatolik yuz berdi, qaytadan urinib ko‚Äòring.", reply_markup=courier_panel_buttons())
        return COURIER_PANEL

    if text == "‚ùå Bandman":
        try:
            with sqlite3.connect('water_bot.db', timeout=10) as conn:
                c = conn.cursor()
                c.execute("UPDATE couriers SET status = 'busy' WHERE courier_id = ?", (user_id,))
                conn.commit()
            COURIERS[user_id]['status'] = 'busy'
            save_global_data()
            await update.message.reply_text("Sizning statusingiz: Band.", reply_markup=courier_panel_buttons())
        except sqlite3.OperationalError as e:
            logger.error(f"Database error in set_courier_status: {e}")
            await update.message.reply_text("Xatolik yuz berdi, qaytadan urinib ko‚Äòring.", reply_markup=courier_panel_buttons())
        return COURIER_PANEL

    await update.message.reply_text("Noto‚Äòg‚Äòri buyruq. Tugmalardan birini tanlang.", reply_markup=courier_panel_buttons())
    return COURIER_PANEL

async def courier_debt_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Kuryer panelga qaytdingiz.", reply_markup=courier_panel_buttons())
        return COURIER_PANEL
    if not re.fullmatch(r'\+998\d{9}', text):
        await update.message.reply_text("Iltimos, to‚Äòg‚Äòri telefon raqamini (+998XXYYYYYYY) kiriting.")
        return COURIER_DEBT_UPDATE
    user = get_user_by_phone(text)
    if not user:
        await update.message.reply_text("Bunday mijoz topilmadi.", reply_markup=courier_panel_buttons())
        return COURIER_PANEL
    await update.message.reply_text(
        f"Mijoz: {user['name']}\n"
        f"Telefon: {user['phone']}\n"
        f"Kullerlar: {user['coolers']}\n"
        f"Bokallar: {user['bottles']}\n"
        f"Qarz: {user['debt']} so'm\n\n"
        "Qarzni yangilash uchun formatda yozing: kullerlar|bokallar|qarz (masalan: 2|5|10000)",
        reply_markup=back_button()
    )
    context.user_data['debt_phone'] = text
    return COURIER_DEBT_UPDATE

async def update_debt_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    if text in ["‚¨ÖÔ∏è Ortga", "üè† Asosiy menyu"]:
        await update.message.reply_text("Kuryer panelga qaytdingiz.", reply_markup=courier_panel_buttons())
        return COURIER_PANEL
    try:
        coolers, bottles, debt = map(int, text.split('|'))
        phone = context.user_data.get('debt_phone')
        if not phone:
            await update.message.reply_text("Xatolik: Telefon raqami topilmadi.", reply_markup=courier_panel_buttons())
            return COURIER_PANEL
        user = get_user_by_phone(phone)
        if not user:
            await update.message.reply_text("Bunday mijoz topilmadi.", reply_markup=courier_panel_buttons())
            return COURIER_PANEL
        update_debt(user['user_id'], coolers, bottles, debt)
        await update.message.reply_text(
            f"Qarz yangilandi:\n"
            f"Kullerlar: +{coolers}\n"
            f"Bokallar: +{bottles}\n"
            f"Qarz: +{debt} so'm",
            reply_markup=courier_panel_buttons()
        )
        return COURIER_PANEL
    except ValueError:
        await update.message.reply_text("Iltimos, to‚Äòg‚Äòri formatda kiriting: kullerlar|bokallar|qarz (masalan: 2|5|10000)")
        return COURIER_DEBT_UPDATE
async def order_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    if not is_courier(user_id):
        await query.message.reply_text("Sizda buyurtma bilan ishlash huquqi yo‚Äòq.")
        return
    action, order_id = query.data.split('_')
    order_id = int(order_id)
    try:
        with sqlite3.connect('water_bot.db', timeout=10) as conn:
            c = conn.cursor()
            c.execute("SELECT status, user_id FROM orders WHERE order_id = ?", (order_id,))
            order = c.fetchone()
            if not order:
                await query.message.reply_text("Buyurtma topilmadi.")
                return
            status, client_id = order
            if action == "take" and status == 'pending':
                update_order_status(order_id, 'taken', user_id)
                COURIERS[user_id]['status'] = 'busy'
                save_global_data()
                with sqlite3.connect('water_bot.db', timeout=10) as conn:
                    c = conn.cursor()
                    c.execute("UPDATE couriers SET status = 'busy' WHERE courier_id = ?", (user_id,))
                    conn.commit()
                await query.message.reply_text(f"Buyurtma ID {order_id} qabul qilindi.")
                try:
                    await context.bot.send_message(
                        chat_id=client_id,
                        text=f"Buyurtma ID {order_id} kuryer tomonidan qabul qilindi."
                    )
                except Exception as e:
                    logger.error(f"Failed to notify client {client_id}: {e}")
                admins = list(SUPER_ADMINS) + [tid for tid, expiry in TEMP_ADMINS.items() if datetime.now() < expiry]
                for admin_id in admins:
                    try:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"Buyurtma ID {order_id} kuryer {COURIERS[user_id]['name']} tomonidan qabul qilindi."
                        )
                    except Exception as e:
                        logger.error(f"Failed to notify admin {admin_id}: {e}")
            elif action == "deliver" and status in ['pending', 'taken']:
                update_order_status(order_id, 'delivered', user_id)
                COURIERS[user_id]['status'] = 'free'
                save_global_data()
                with sqlite3.connect('water_bot.db', timeout=10) as conn:
                    c = conn.cursor()
                    c.execute("UPDATE couriers SET status = 'free' WHERE courier_id = ?", (user_id,))
                    c.execute("SELECT cart FROM orders WHERE order_id = ?", (order_id,))
                    cart = eval(c.fetchone()[0])
                    bottles_19L = cart.get('19L', 0)
                    c.execute("UPDATE debts SET bottles = bottles + ? WHERE user_id = ?", (bottles_19L, client_id))
                    conn.commit()
                await query.message.reply_text(f"Buyurtma ID {order_id} yetkazib berildi.")
                try:
                    await context.bot.send_message(
                        chat_id=client_id,
                        text=f"Buyurtma ID {order_id} yetkazib berildi. Rahmat!"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify client {client_id}: {e}")
                admins = list(SUPER_ADMINS) + [tid for tid, expiry in TEMP_ADMINS.items() if datetime.now() < expiry]
                for admin_id in admins:
                    try:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"Buyurtma ID {order_id} kuryer {COURIERS[user_id]['name']} tomonidan yetkazib berildi."
                        )
                    except Exception as e:
                        logger.error(f"Failed to notify admin {admin_id}: {e}")
            else:
                await query.message.reply_text("Noto‚Äòg‚Äòri harakat yoki buyurtma statusi.")
    except sqlite3.OperationalError as e:
        logger.error(f"Database error in order_action: {e}")
        await query.message.reply_text("Xatolik yuz berdi, qaytadan urinib ko‚Äòring.")
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.message:
        await update.message.reply_text("Xatolik yuz berdi, iltimos qaytadan urinib ko‚Äòring.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            WATER_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, water_select)],
            WATER_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, water_quantity)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, location_handler),
                      MessageHandler(filters.LOCATION, location_handler)],
            DELIVERY_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_time_handler)],
            CONFIRM_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_order)],
            ADMIN_PANEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_panel_handler)],
            ADD_SUPER_ADMIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_super_admin)],
            ADD_DEMO_ADMIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_demo_admin)],
            ADD_CLIENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_client)],
            DELETE_CLIENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_client)],
            SEARCH_CLIENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_client)],
            DELETE_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_order)],
            BROADCAST_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_text)],
            EDIT_PROMO: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_promo)],
            ADD_COURIER: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_courier)],
            COURIER_PANEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, courier_panel_handler)],
            COURIER_DEBT_UPDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_debt_handler)],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(order_action))
    app.add_error_handler(error_handler)

    app.run_polling()

if __name__ == '__main__':
    main()

